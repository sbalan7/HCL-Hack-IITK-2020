from sklearn.ensemble import RandomForestClassifier
import pandas as pd
import numpy as np
import pickle
import json
import os


def dynamic_data_extract(path):
    dataline = pd.DataFrame()
    with open(path) as f:
        data = json.load(f)

        # Extract name hash
        try:
            x = data['target']['file']['sha256']
        except:
            print('File hash misssing for file {}'.format(path))
            x = 0
        finally:
            dataline['name'] = x

        # Extract scores
        try:
            x = data['info']['score']
        except:
            print('File score misssing for file {}'.format(path))
            x = 0
        finally:
            dataline['score'] = x

        # Extract size
        try:
            x = data['target']['file']['size']
        except:
            print('File size misssing for file {}'.format(path))
            x = 0
        finally:
            dataline['size'] = x

        # Extract source
        try:
            x = data['info']['route']
            if x == 'none':
                x = 0
            else:
                x = 1
        except:
            print('File route misssing for file {}'.format(path))
            x = 0
        finally:
            dataline['route'] = x
        
        if 'virustotal' in data.keys():
            dataline['virus'] = 1
        else:
            dataline['virus'] = 0

        if 'Benign' in path:
            dataline['target'] = 0
        else:
            dataline['target'] = 1

    return dataline

def dynamic_predict(dataline):
    prediction = dynamic_model.predict(dataline)
    if prediction == 0:
        return {dataline['name']: 'benign'}
    else:
        return {dataline['name']: 'malware'}



def static_data_extract(path):
    # Feed path all the way to hash i.e.
    # test/static/<benign/malware>  in path arguement
    import sys
    sys.path.insert(1, 'Static-Analysis')

    from feature_extraction import parse_eng_example, parse_single_example, get_entropy
    from feature_extraction import raw_features, engineered_features

    # if benign
    dirlist = os.listdir(path)
    dirlist = dirlist[:5]
    all_data = []
    all_data2 = []
        # Loop over filenames 
    for i, sha in enumerate(dirlist):
        p = path + sha + '/Structure_Info.txt'
        data = {}
        data2 = {}
        data = parse_single_example(p, raw_features, data)
        data2 = parse_eng_example(p, engineered_features, data2)
        entropy = get_entropy(p)
        if data is None or data2 is None:
            print("Error in encoding for file " + str(sha))
        else:
            data["name"] = sha
            data2["name"] = sha
            if entropy is not None:
                data2["Entropy:"] = entropy
            else:
                data2["Entropy:"] = 0
            all_data.append(data)
            all_data2.append(data2)

    df1 = pd.DataFrame(all_data)
    df2 = pd.DataFrame(all_data2)
    df = pd.merge(left=df1, right=df2, on="name")
    df = df.drop("Name:", axis=1)
    return df

p1 = "../../Desktop/Hackathon IITK/Static_Analysis_Data/Benign/" 
dynamic_model = pickle.load(open(os.path.join('Dynamic-Analysis', 'dynamic_model.dtc')))

df = static_data_extract(p1)
df.to_csv("trial.csv")

test_dir_path = ''
test_list = os.listdir(test_dir_path)
for h in test_list:
    p = os.path.join(test_dir_path, h)
    q = os.listdir(p)
    if len(q) == 2:
        # Static Analysis
    else:
        # Dynamic Analysis

